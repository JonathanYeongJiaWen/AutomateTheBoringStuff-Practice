import re

#DD/MM/YYYY 01-31/01=12/1000-2999

def date_detection(dates):
    dateregex = re.compile('^(0[1-9]|[12][0-9]|3[01])/(0[1-9]|1[0-2])/([1-2][0-9]{3})')
    '''April, June, September, and November have 30 days, February has 28 days, and the rest of the months have 31 days. 
    February has 29 days in leap years. Leap years are every year evenly divisible by 4, except for years evenly divisible by 100, 
    unless the year is also evenly divisible by 400.'''
    for date in dates:
        x = dateregex.search(date)
        if x:
            day, month, year = map(int, x.groups())
            leapyears = (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)
            if month in [4, 6, 9, 11] and day > 30:
                print(f'This date is invalid: {date}. There are 30 days in this month.')
            elif month == 2:
                if leapyears and day > 29:
                    print(f'This date is invalid: {date}. It is a leap year, there should be 29 days in Feb.')
                elif not leapyears and day > 28:
                    print(f'This date is invalid: {date}. It is not a leap year, there should be 28 days in Feb.')
                else:
                    print(f'This date: {date} is a valid date.')
            elif month not in [2, 4, 6, 9, 11] and day > 31:
                print(f'This date is invalid: {date}. There are 31 days in this month.')
            else:
                print(f'This date: {date} is a valid date.')
        else:
            print(f'This date: {date} is not a valid date.')

dates = ['31/01/2023', '30/02/2024', '30/04/2023','29/02/1900', '15/13/2023', '31/04/2023']

date_detection(dates)

